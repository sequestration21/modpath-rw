# makefile created on 2017-12-20 13:16:47.325722
# by pymake (version 1.1.0)
# using the gfortran fortran and gcc c/c++ compilers.

# Define the directories for the object and module files,
# the executable, and the executable name and path.
OBJDIR = ./obj_temp
BINDIR = .
PROGRAM = mpathrw

SOURCEDIR1=../source
SOURCEDIR2=../lib/gpkde/src
SOURCEDIR3=../lib/finterp/src

VPATH = \
${SOURCEDIR1} \
${SOURCEDIR2} \
${SOURCEDIR3} 


.SUFFIXES: .c .cpp .f .f90 .F90 .fpp .o

# Define the Fortran compile flags
FC = gfortran
# FROM MODPATH-OMP
#FFLAGS = -O2 -fbacktrace -fopenmp
# FROM MF6
FFLAGS = -O2 -fopenmp -fbacktrace -ffpe-summary=overflow -ffpe-trap=overflow,zero,invalid -fall-intrinsics -Wtabs -Wline-truncation -Wunused-label -Wunused-variable -pedantic -std=f2008 -Wcharacter-truncation -cpp
# DEBUG
#FFLAGS = -g -O0 -fopenmp -fbacktrace -ffpe-summary=overflow -ffpe-trap=overflow,zero,invalid -fall-intrinsics -Wtabs -Wline-truncation -Wunused-label -Wunused-variable -pedantic -std=f2008 -Wcharacter-truncation -cpp

# Define the C compile flags
CC = gcc
CFLAGS = -O3 -D_UF 

# Define the libraries
SYSLIBS = 

# Start with objects from GPKDE, 
# then the library for linear interpolation, 
# and then modpath files
OBJECTS = \
$(OBJDIR)/Histogram.o \
$(OBJDIR)/KernelMultiGaussian.o \
$(OBJDIR)/GridCell.o \
$(OBJDIR)/GridProjectedKDE.o \
$(OBJDIR)/linear_interpolation_module.o \
$(OBJDIR)/Coordinate.o \
$(OBJDIR)/TrackCellOptions.o \
$(OBJDIR)/BudgetListItem.o \
$(OBJDIR)/HeadRecordHeader.o \
$(OBJDIR)/GridLocation.o \
$(OBJDIR)/GlobalData.o \
$(OBJDIR)/DispersionData.o \
$(OBJDIR)/Solute.o \
$(OBJDIR)/Observation.o \
$(OBJDIR)/ParticleTrackingOptions.o \
$(OBJDIR)/compilerversion.o \
$(OBJDIR)/openspec.o \
$(OBJDIR)/Particle.o \
$(OBJDIR)/utl7.o \
$(OBJDIR)/GridLocationList.o \
$(OBJDIR)/GeoReference.o \
$(OBJDIR)/ModpathUnstructuredBasicData.o \
$(OBJDIR)/UtilMisc.o \
$(OBJDIR)/ParticleLocation.o \
$(OBJDIR)/BudgetRecordHeader.o \
$(OBJDIR)/ParticleCoordinate.o \
$(OBJDIR)/ParticleGroup.o \
$(OBJDIR)/ParticleLocationList.o \
$(OBJDIR)/ParticleCoordinateList.o \
$(OBJDIR)/utl8.o \
$(OBJDIR)/ParticleLocationPtr.o \
$(OBJDIR)/ModflowGrid.o \
$(OBJDIR)/BudgetReader.o \
$(OBJDIR)/TimeDiscretizationData.o \
$(OBJDIR)/ModpathSubCellData.o \
$(OBJDIR)/ParticlePath.o \
$(OBJDIR)/TrackSubCellResult.o \
$(OBJDIR)/HeadReader.o \
$(OBJDIR)/TrackPathResult.o \
$(OBJDIR)/ModflowRectangularGrid.o \
$(OBJDIR)/ModpathBasicData.o \
$(OBJDIR)/RectangularGridDisMf6.o \
$(OBJDIR)/ModpathCellData.o \
$(OBJDIR)/TrackSubCell.o \
$(OBJDIR)/RectangularGridDisvMf6.o \
$(OBJDIR)/StartingLocationReader.o \
$(OBJDIR)/RectangularGridDis.o \
$(OBJDIR)/RectangularGridDisuMfusg.o \
$(OBJDIR)/TrackCellResult.o \
$(OBJDIR)/RectangularGridDisuMf6.o \
$(OBJDIR)/ModpathCellDataContainer.o \
$(OBJDIR)/FlowModelData.o \
$(OBJDIR)/ModpathSimulationData.o \
$(OBJDIR)/ParticleManager.o \
$(OBJDIR)/TrackCell.o \
$(OBJDIR)/TransportModelData.o \
$(OBJDIR)/ParticleTrackingEngine.o \
$(OBJDIR)/MPath7.o 

# Define task functions

# Create the bin directory and compile and link the program
all: makebin | $(PROGRAM)

# Make the bin directory for the executable
makebin :
	mkdir -p $(BINDIR)

# Define the objects that make up the program
$(PROGRAM) : $(OBJECTS)
	-$(FC) $(FFLAGS) -o $@ $(OBJECTS) $(SYSLIBS) -I$(OBJDIR) -J$(OBJDIR) 

$(OBJDIR)/%.o : %.f
	@mkdir -p $(@D)
	$(FC) $(FFLAGS) -c $< -o $@ -I$(OBJDIR) -J$(OBJDIR) 

$(OBJDIR)/%.o : %.f90
	@mkdir -p $(@D)
	$(FC) $(FFLAGS) -c $< -o $@ -I$(OBJDIR) -J$(OBJDIR) 

$(OBJDIR)/%.o : %.F90
	@mkdir -p $(@D)
	$(FC) $(FFLAGS) -c $< -o $@ -I$(OBJDIR) -J$(OBJDIR) 

$(OBJDIR)/%.o : %.fpp
	@mkdir -p $(@D)
	$(FC) $(FFLAGS) -c $< -o $@ -I$(OBJDIR) -J$(OBJDIR) 

$(OBJDIR)/%.o : %.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.o : %.cpp
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean the object and module files and the executable
.PHONY : clean
clean : 
	-rm -rf $(OBJDIR)
	-rm -rf $(PROGRAM)

# Clean the object and module files
.PHONY : cleanobj
cleanobj : 
	-rm -rf $(OBJDIR)

